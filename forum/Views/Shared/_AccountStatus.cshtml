@*@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="account-status">
    $1$ Check if user is signed in and if the user exists #1#
    @if (SignInManager.IsSignedIn(User) && UserManager.GetUserAsync(User).Result != null)
    {
        <li>
            <a id="manage-link" class="nav-btn-text" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
        </li>

        <li class="img-container">
            @{
                $1$ Get the user #1#
                var user = await UserManager.GetUserAsync(User);

                string? profilePictureBase64 = null;

                $1$ If the user has a profile picture, convert it to base64 #1#
                if (user.ProfilePicture != null)
                {
                    profilePictureBase64 = Convert.ToBase64String(user.ProfilePicture);
                }

            }
            $1$ Profile-picture #1#
            <img src="@(profilePictureBase64 != null ? $"data:image/*;base64,{profilePictureBase64}" : Url.Identicon(user.UserName, 40))" alt="@($"Avatar of {user.UserName}")"/>
        </li>
    }
    $1$ User is not logged in or does not exist #1#
    else
    {
        <li>
            <a id="register-link" class="nav-btn-text" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li>
            <a id="login-link" class="nav-btn-text" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>*@