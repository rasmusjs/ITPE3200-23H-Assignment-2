@*@using System.Security.Claims
@using Markdig
@model forum.ViewModels.PostCardViewModel

<div class="shared-postCard">
    <div class="top">
        <div class="chips">

            $1$ Category #1#
            <a asp-controller="Search"
               asp-action="Search"
               asp-route-term="@Model.Post.Category?.Name"
               class="category" style="background-color: @Model.Post.Category?.Color">
                @Model.Post.Category?.Name
            </a>

            $1$ Tags #1#
            @if (Model.Post.Tags != null)
            {
                foreach (var tag in Model.Post.Tags)
                {
                    <a asp-controller="Search"
                       asp-action="Search"
                       asp-route-term="@tag.Name"
                       class="tag">
                        @tag.Name
                    </a>
                }
            }
        </div>

        <div class="creation-info">
            <div class="user-info">
                Posted by
                <span class="user">
                    @if (Model.Post.User != null)
                    {
                        <a asp-controller="Search"
                           asp-action="Search"
                           asp-route-term="@Model.Post.User.UserName">
                            @Model.Post.User.UserName
                        </a>
                    }
                    else
                    {
                        <span class="deleted-user" title="Deleted user">[deleted user]</span>
                    }
                </span>

                $1$ Shows how long ago the post was created #1#
                <span class="date-hoverable">
                    @CalculateTimeAgo(Model.Post.DateCreated)<span class="exact-date">@Model.Post.DateCreated</span>
                </span>

                $1$ If the post has been edited, show how long ago this happened #1#
                @if (Model.Post.DateLastEdited != null)
                {
                    <span class="last-edited">
                        Last edited
                        <span class="date-hoverable">
                            @CalculateTimeAgo(Model.Post.DateLastEdited.Value)<span class="exact-date">@Model.Post.DateLastEdited</span>
                        </span>
                    </span>
                }
            </div>

            $1$ Profile picture #1#
            @{
                string? profilePictureBase64 = null;

                // If the user has a profile picture, convert it to base64
                if (Model.Post.User?.ProfilePicture != null)
                {
                    profilePictureBase64 = Convert.ToBase64String(Model.Post.User.ProfilePicture);
                }
            }
            <img src="@(profilePictureBase64 != null ? $"data:image/*;base64,{profilePictureBase64}" : Url.Identicon(Model.Post.User?.UserName, 40))" alt="@($"Avatar of {Model.Post.User?.UserName}")"/>
        </div>
    </div>

    <div class="content">
        $1$ Title #1#
        <div class="title">@Model.Post.Title</div>

        $1$ Content #1#
        <div class="markdown @(Model.LimitContent ? "limit-content" : "")">
            @Html.Raw(Markdown.ToHtml(Model.Post.Content))
        </div>
    </div>

    <div class="bottom">
        <div class="likes-comments">
            $1$ Totals likes. Likes post if clicked #1#
            <a asp-controller="Post"
               asp-action="LikePost"
               asp-route-id="@Model.Post.PostId"
               class="@(Model.Post.IsLiked ? "liked" : "")">
                <i class="fa-solid fa-thumbs-up"></i>
                @Model.Post.TotalLikes <span class="hide-on-small-screen">Likes</span>
            </a>

            $1$ Total likes. Navigates to post to see comments if clicked #1#
            <a asp-controller="Post"
               asp-action="Post"
               asp-route-id="@Model.Post.PostId">
                <i class="fa-solid fa-comment"></i>@Model.Post.Comments?.Count <span class="hide-on-small-screen">Comments</span>
            </a>
        </div>

        $1$ Edit, Delete, Go to post #1#
        <div class="links">
            $1$ If the user is admin, show button for deleting. #1#
            $1$ If the user is the owner of the comment, show buttons for editing and deleting. #1#
            @if (Model.Post.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier) || User.IsInRole("Admin"))
            {
                if (Model.Post.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                {
                    <a asp-controller="Post"
                       asp-action="Update"
                       asp-route-id="@Model.Post.PostId">
                        <i class="fa-solid fa-pen-to-square"></i><span class="hide-on-small-screen">&nbsp;&nbsp;&nbsp;Edit</span>
                    </a>
                }
                <a asp-controller="Post"
                   asp-action="Delete"
                   asp-route-id="@Model.Post.PostId">
                    <i class="fa-solid fa-trash-can"></i><span class="hide-on-small-screen">&nbsp;&nbsp;&nbsp;Delete</span>
                </a>
            }

            @if (!Model.HideGoToPost)
            {
                <a asp-controller="Post"
                   asp-action="Post"
                   asp-route-id="@Model.Post.PostId">
                    <i class="fa-solid fa-arrow-right"></i><span class="hide-on-small-screen">&nbsp;&nbsp;&nbsp;Go to post</span>
                </a>
            }
        </div>
    </div>
</div>

@functions {
        $1$ Calculates how much time has passed since "date" and until the current moment. 
    It then returns a string describing this time difference in a human-readable format. #1#

    static string CalculateTimeAgo(DateTime date)
    {
        var timeDifference = DateTime.Now - date;

        if (timeDifference.TotalMinutes < 1)
        {
            return "just now";
        }
        if (timeDifference.TotalMinutes < 60)
        {
            var minutesAgo = (int)timeDifference.TotalMinutes;
            return $"{minutesAgo} {(minutesAgo == 1 ? "minute" : "minutes")} ago";
        }
        if (timeDifference.TotalHours < 24)
        {
            var hoursAgo = (int)timeDifference.TotalHours;
            return $"{hoursAgo} {(hoursAgo == 1 ? "hour" : "hours")} ago";
        }
        if (timeDifference.TotalDays < 30)
        {
            var daysAgo = (int)timeDifference.TotalDays;
            return $"{daysAgo} {(daysAgo == 1 ? "day" : "days")} ago";
        }
        if (timeDifference.TotalDays < 365)
        {
            var monthsAgo = (int)(timeDifference.TotalDays / 30);
            return $"{monthsAgo} {(monthsAgo == 1 ? "month" : "months")} ago";
        }
        var yearsAgo = (int)(timeDifference.TotalDays / 365);
        return $"{yearsAgo} {(yearsAgo == 1 ? "year" : "years")} ago";
    }

}*@