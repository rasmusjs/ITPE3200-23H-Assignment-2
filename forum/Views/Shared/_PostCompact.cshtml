@using Markdig
@model Post

<div class="shared-postCompact">
    <div class="top">
        <div class="chips">

            @* Category *@
            <a asp-controller="Search"
               asp-action="Search"
               asp-route-term="@Model.Category?.Name"
               class="category" style="background-color: @Model.Category?.Color">
                @Model.Category?.Name
            </a>

            @* Tags *@
            @if (Model.Tags != null)
            {
                foreach (var tag in Model.Tags)
                {
                    <a asp-controller="Search"
                       asp-action="Search"
                       asp-route-term="@tag.Name"
                       class="tag">
                        @tag.Name
                    </a>
                }
            }
        </div>

        <div class="creation-info">
            By
            <span class="user">
                @if (Model.User != null)
                {
                    <a asp-controller="Search"
                       asp-action="Search"
                       asp-route-term="@Model.User.UserName">
                        @Model.User.UserName
                    </a>
                }
                else
                {
                    <span class="deleted-user" title="Deleted user">[deleted user]</span>
                }
            </span>

            @* Shows how long ago the post was created *@
            <span class="date-hoverable">
                @CalculateTimeAgo(Model.DateCreated)<span class="exact-date">@Model.DateCreated</span>
            </span>

            @* If the post has been edited, show how long ago this happened *@
            @if (Model.DateLastEdited != null)
            {
                <span class="last-edited">
                    (edited
                    <span class="date-hoverable">
                        @CalculateTimeAgo(Model.DateLastEdited.Value)<span class="exact-date">@Model.DateLastEdited</span>
                    </span>)
                </span>
            }
        </div>

        @* Shows number of likes and comments *@
        <div class="likes-comments">
            @Model.TotalLikes likes | @Model.Comments?.Count comments
        </div>
    </div>

    <div class="bottom">
        <div class="left-side">
            @* Title *@
            <div class="title">@Model.Title</div>
            @* Content *@
            <div class="content">@Html.Raw(Markdown.ToHtml(Model.Content))</div>
        </div>
        <div class="right-side">
            @* Button/link that goes to the post *@
            <a asp-controller="Post"
               asp-action="Post"
               asp-route-id="@Model.PostId">
                <i class="fa-solid fa-arrow-right"></i>
            </a>
        </div>
    </div>
</div>

@functions {
        @* Calculates how much time has passed since "date" and until the current moment. 
    It then returns a string describing this time difference in a human-readable format. *@

    static string CalculateTimeAgo(DateTime date)
    {
        var timeDifference = DateTime.Now - date;

        if (timeDifference.TotalMinutes < 1)
        {
            return "just now";
        }
        if (timeDifference.TotalMinutes < 60)
        {
            var minutesAgo = (int)timeDifference.TotalMinutes;
            return $"{minutesAgo} {(minutesAgo == 1 ? "minute" : "minutes")} ago";
        }
        if (timeDifference.TotalHours < 24)
        {
            var hoursAgo = (int)timeDifference.TotalHours;
            return $"{hoursAgo} {(hoursAgo == 1 ? "hour" : "hours")} ago";
        }
        if (timeDifference.TotalDays < 30)
        {
            var daysAgo = (int)timeDifference.TotalDays;
            return $"{daysAgo} {(daysAgo == 1 ? "day" : "days")} ago";
        }
        if (timeDifference.TotalDays < 365)
        {
            var monthsAgo = (int)(timeDifference.TotalDays / 30);
            return $"{monthsAgo} {(monthsAgo == 1 ? "month" : "months")} ago";
        }
        var yearsAgo = (int)(timeDifference.TotalDays / 365);
        return $"{yearsAgo} {(yearsAgo == 1 ? "year" : "years")} ago";
    }

}