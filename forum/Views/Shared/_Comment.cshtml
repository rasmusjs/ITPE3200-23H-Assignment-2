@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens
@using Microsoft.AspNetCore.Identity
@model Comment
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    var signedIn = SignInManager.IsSignedIn(User) && UserManager.GetUserAsync(User).Result != null;
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "";
}

<div id="commentId-@Model.CommentId" class="comment">
    <div class="main-content">
        <span asp-validation-for="@Model.Content"></span>
        <div class="creation-info">
            <span class="user">
                @if (Model.User != null)
                {
                    <div class="existing-user">
                        @{
                            string? profilePictureBase64 = null;

                            @* If the user has a profile picture, convert it to base64 *@
                            if (Model.User.ProfilePicture != null)
                            {
                                profilePictureBase64 = Convert.ToBase64String(Model.User.ProfilePicture);
                            }
                        }
                        <img src="@(profilePictureBase64 != null ? $"data:image/*;base64,{profilePictureBase64}" : Url.Identicon(Model.User.UserName, 40))" alt=""/>

                        @* Click on username to search for all their related posts *@
                        <a asp-controller="Search"
                           asp-action="Search"
                           asp-route-term="@Model.User?.UserName">
                            @Model.User?.UserName
                        </a>
                    </div>
                }
                else
                {
                    <span class="deleted-user" title="Deleted user">[deleted user]</span>
                }
            </span>

            @* Shows how long ago the comment was created *@
            <span>
                Created
                <span class="date-hoverable">
                    @CalculateTimeAgo(Model.DateCreated)<span class="exact-date">@Model.DateCreated</span>
                </span>
            </span>

            @* If comment has been edited/changed, shows how long ago this happened *@
            @if (Model.DateLastEdited != null)
            {
                <span class="last-edited">
                    (last edited
                    <span class="date-hoverable">
                        @CalculateTimeAgo(Model.DateLastEdited.Value)<span class="exact-date">@Model.DateLastEdited</span>
                    </span>)
                </span>
            }
        </div>

        <div class="content">
            @if (Model.Content.IsNullOrEmpty())
            {
                <p>[Deleted comment]</p>
            }
            else
            {
                @Model.Content
            }
        </div>

        <div class="likes-and-comments">@Model.TotalLikes likes<span class="spacer">|</span>@Model.CommentReplies?.Count replies</div>

        <div class="bottom">
            <a asp-controller="Post"
               asp-action="LikeComment"
               asp-route-id="@Model.CommentId"
               class="clickable @(Model.IsLiked ? "liked" : "")">
                @(Model.IsLiked ? "Liked" : "Like")
            </a>

            @* Adds reply button if user is signed in *@
            @if (signedIn)
            {
                <button class="reply-btn clickable">Reply</button>
                <div class="reply-div">
                    <partial name="_CreateComment" model="new Comment { ParentCommentId = Model.CommentId, PostId = Model.PostId }"/>
                </div>
            }

            <div class="right-side">
                @* If the user is admin, show button for deleting. *@
                @* If the user is the owner of the comment, show buttons for editing and deleting. *@
                @* signedIn is checked to prevent the buttons to be shown if User.Id is null *@
                @if (((Model.UserId == userId && signedIn) || User.IsInRole("Admin")) && !Model.Content.IsNullOrEmpty())
                {
                    if (Model.UserId == userId)
                    {
                        <button class="edit-btn clickable">Edit</button>
                        <div class="edit-div">
                            <partial name="_UpdateComment" model="Model"/>
                        </div>
                    }

                    <a asp-controller="Post"
                       asp-action="DeleteComment"
                       asp-route-id="@Model.CommentId"
                       class="clickable">
                        Delete
                    </a>
                }
            </div>
        </div>
    </div>

    @* Sub-comments (replies) to the comment *@
    @if (Model.CommentReplies != null && Model.CommentReplies.Count != 0)
    {
        <div class="sub-comments">
            @foreach (var comment in Model.CommentReplies)
            {
                <partial name="_Comment" model="comment"/>
            }
        </div>
    }
</div>

@functions {
        @* Calculates how much time has passed since "date" and until the current moment. 
    It then returns a string describing this time difference in a human-readable format. *@

    static string CalculateTimeAgo(DateTime date)
    {
        var timeDifference = DateTime.Now - date;

        if (timeDifference.TotalMinutes < 1)
        {
            return "just now";
        }
        if (timeDifference.TotalMinutes < 60)
        {
            var minutesAgo = (int)timeDifference.TotalMinutes;
            return $"{minutesAgo} {(minutesAgo == 1 ? "minute" : "minutes")} ago";
        }
        if (timeDifference.TotalHours < 24)
        {
            var hoursAgo = (int)timeDifference.TotalHours;
            return $"{hoursAgo} {(hoursAgo == 1 ? "hour" : "hours")} ago";
        }
        if (timeDifference.TotalDays < 30)
        {
            var daysAgo = (int)timeDifference.TotalDays;
            return $"{daysAgo} {(daysAgo == 1 ? "day" : "days")} ago";
        }
        if (timeDifference.TotalDays < 365)
        {
            var monthsAgo = (int)(timeDifference.TotalDays / 30);
            return $"{monthsAgo} {(monthsAgo == 1 ? "month" : "months")} ago";
        }
        var yearsAgo = (int)(timeDifference.TotalDays / 365);
        return $"{yearsAgo} {(yearsAgo == 1 ? "year" : "years")} ago";
    }

}